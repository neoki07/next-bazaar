/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Next Bazaar API
 * OpenAPI spec version: 0.0.1
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type { ErrorType } from '../../custom-axios-instance'
import { customAxiosInstance } from '../../custom-axios-instance'
import type {
  ApiErrorResponse,
  ApiMessageResponse,
  CartDomainAddProductRequest,
  CartDomainCartProductsCountResponse,
  CartDomainCartResponse,
  CartDomainUpdateProductQuantityRequestBody,
} from '../../model'

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never

/**
 * @summary Get cart
 */
export const getCart = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<CartDomainCartResponse>(
    { url: `/cart`, method: 'get', signal },
    options
  )
}

export const getGetCartQueryKey = () => [`/cart`] as const

export const getGetCartQueryOptions = <
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = ErrorType<ApiErrorResponse>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCartQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCart>>> = ({
    signal,
  }) => getCart(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetCartQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCart>>
>
export type GetCartQueryError = ErrorType<ApiErrorResponse>

export const useGetCart = <
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = ErrorType<ApiErrorResponse>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCartQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Delete cart product
 */
export const deleteCartProductId = (
  productId: string,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    { url: `/cart/${productId}`, method: 'delete' },
    options
  )
}

export const getDeleteCartProductIdMutationOptions = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCartProductId>>,
    TError,
    { productId: string },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCartProductId>>,
  TError,
  { productId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCartProductId>>,
    { productId: string }
  > = (props) => {
    const { productId } = props ?? {}

    return deleteCartProductId(productId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCartProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCartProductId>>
>

export type DeleteCartProductIdMutationError = ErrorType<ApiErrorResponse>

export const useDeleteCartProductId = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCartProductId>>,
    TError,
    { productId: string },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const mutationOptions = getDeleteCartProductIdMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Update cart product quantity
 */
export const putCartProductId = (
  productId: string,
  cartDomainUpdateProductQuantityRequestBody: CartDomainUpdateProductQuantityRequestBody,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<ApiMessageResponse>(
    {
      url: `/cart/${productId}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: cartDomainUpdateProductQuantityRequestBody,
    },
    options
  )
}

export const getPutCartProductIdMutationOptions = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCartProductId>>,
    TError,
    { productId: string; data: CartDomainUpdateProductQuantityRequestBody },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCartProductId>>,
  TError,
  { productId: string; data: CartDomainUpdateProductQuantityRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCartProductId>>,
    { productId: string; data: CartDomainUpdateProductQuantityRequestBody }
  > = (props) => {
    const { productId, data } = props ?? {}

    return putCartProductId(productId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutCartProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCartProductId>>
>
export type PutCartProductIdMutationBody =
  CartDomainUpdateProductQuantityRequestBody
export type PutCartProductIdMutationError = ErrorType<ApiErrorResponse>

export const usePutCartProductId = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCartProductId>>,
    TError,
    { productId: string; data: CartDomainUpdateProductQuantityRequestBody },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const mutationOptions = getPutCartProductIdMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Add product to cart
 */
export const postCartAddProduct = (
  cartDomainAddProductRequest: CartDomainAddProductRequest,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<ApiMessageResponse>(
    {
      url: `/cart/add-product`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: cartDomainAddProductRequest,
    },
    options
  )
}

export const getPostCartAddProductMutationOptions = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCartAddProduct>>,
    TError,
    { data: CartDomainAddProductRequest },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCartAddProduct>>,
  TError,
  { data: CartDomainAddProductRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCartAddProduct>>,
    { data: CartDomainAddProductRequest }
  > = (props) => {
    const { data } = props ?? {}

    return postCartAddProduct(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostCartAddProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCartAddProduct>>
>
export type PostCartAddProductMutationBody = CartDomainAddProductRequest
export type PostCartAddProductMutationError = ErrorType<ApiErrorResponse>

export const usePostCartAddProduct = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCartAddProduct>>,
    TError,
    { data: CartDomainAddProductRequest },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const mutationOptions = getPostCartAddProductMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Get cart products count
 */
export const getCartCount = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<CartDomainCartProductsCountResponse>(
    { url: `/cart/count`, method: 'get', signal },
    options
  )
}

export const getGetCartCountQueryKey = () => [`/cart/count`] as const

export const getGetCartCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getCartCount>>,
  TError = ErrorType<ApiErrorResponse>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCartCount>>,
    TError,
    TData
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryOptions<Awaited<ReturnType<typeof getCartCount>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCartCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartCount>>> = ({
    signal,
  }) => getCartCount(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetCartCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCartCount>>
>
export type GetCartCountQueryError = ErrorType<ApiErrorResponse>

export const useGetCartCount = <
  TData = Awaited<ReturnType<typeof getCartCount>>,
  TError = ErrorType<ApiErrorResponse>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCartCount>>,
    TError,
    TData
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCartCountQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
