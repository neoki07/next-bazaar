/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Next Bazaar API
 * OpenAPI spec version: 0.0.1
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type { ErrorType } from '../../custom-axios-instance'
import { customAxiosInstance } from '../../custom-axios-instance'
import type {
  ApiAddProductToCartRequest,
  ApiErrorResponse,
  ApiMessageResponse,
  ApiProductResponse,
} from '../../model'

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never

/**
 * @summary Add product to cart
 */
export const postCartProducts = (
  apiAddProductToCartRequest: ApiAddProductToCartRequest,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<ApiMessageResponse>(
    {
      url: `/cart-products`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: apiAddProductToCartRequest,
    },
    options
  )
}

export const getPostCartProductsMutationOptions = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCartProducts>>,
    TError,
    { data: ApiAddProductToCartRequest },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCartProducts>>,
  TError,
  { data: ApiAddProductToCartRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCartProducts>>,
    { data: ApiAddProductToCartRequest }
  > = (props) => {
    const { data } = props ?? {}

    return postCartProducts(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostCartProductsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCartProducts>>
>
export type PostCartProductsMutationBody = ApiAddProductToCartRequest
export type PostCartProductsMutationError = ErrorType<ApiErrorResponse>

export const usePostCartProducts = <
  TError = ErrorType<ApiErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCartProducts>>,
    TError,
    { data: ApiAddProductToCartRequest },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const mutationOptions = getPostCartProductsMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Get cart products
 */
export const getCartProductsUserId = (
  userId: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<ApiProductResponse>(
    { url: `/cart-products/${userId}`, method: 'get', signal },
    options
  )
}

export const getGetCartProductsUserIdQueryKey = (userId: string) =>
  [`/cart-products/${userId}`] as const

export const getGetCartProductsUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCartProductsUserId>>,
  TError = ErrorType<ApiErrorResponse>
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCartProductsUserId>>,
      TError,
      TData
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getCartProductsUserId>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetCartProductsUserIdQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCartProductsUserId>>
  > = ({ signal }) => getCartProductsUserId(userId, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions }
}

export type GetCartProductsUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCartProductsUserId>>
>
export type GetCartProductsUserIdQueryError = ErrorType<ApiErrorResponse>

export const useGetCartProductsUserId = <
  TData = Awaited<ReturnType<typeof getCartProductsUserId>>,
  TError = ErrorType<ApiErrorResponse>
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCartProductsUserId>>,
      TError,
      TData
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCartProductsUserIdQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
